# Powershell script to execute when a new Windows VM is set up. 

Write-Output "[*] Initializing Provision Script..."

$RegPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
$DefaultUsername = "your username"
$DefaultPassword = "your password"
Set-ItemProperty $RegPath "AutoAdminLogon" -Value "1" -type String 
Set-ItemProperty $RegPath "DefaultUsername" -Value "vagrant" -type String 
Set-ItemProperty $RegPath "DefaultPassword" -Value "vagrant" -type String

Write-Output "[*] Autologon Configured"

powercfg.exe /SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 3600
powercfg.exe /SETACTIVE SCHEME_CURRENT

powercfg.exe /SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 3600
powercfg.exe /SETACTIVE SCHEME_CURRENT

Write-Output "[*] Screen Timeout extended"

Set-MpPreference -ExclusionPath C:\Users\vagrant\vagrant_data
Write-Output "[*] Vagrant folder added to Defender Exclusion"


cd C:\Users\vagrant\vagrant_data
Set-ExecutionPolicy Unrestricted -Force

# Attempt to disable the firewall and WinDefend
netsh advfirewall set allprofiles state off
Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
Unblock-File disable-defender.ps1
.\disable-defender.ps1

Write-Output "[*] Win Defender disabled"

# Setup Choco
$choco_command = Get-Command choco
if(-Not $choco_command) {
  iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
}

# # Install Choco Apps
# choco install -y 7zip
# choco install -y wireshark
# # choco install -y 'process explorer'
# choco install -y die
# choco install -y tcpview
# choco install -y autoruns

# Copy over other tools
New-Item -Path 'C:\Tools\' -ItemType Directory
Invoke-WebRequest -Uri "https://downloads.sourceforge.net/project/pev/pev-0.81/pev-0.81-win.zip?ts=gAAAAABkXZSb-A4sOyJF-LnIy9fm3_8cgl9nqjWo5UQFnJ2pu5sreTFypEW-OmJ0blTVK4sLfPpy9sy5Ev35xD6kiaOR_hIRDw%3D%3D&r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fpev%2Ffiles%2Fpev-0.81%2Fpev-0.81-win.zip%2Fdownload" -Outfile "C:\Tools\pev.zip"

Copy-Item "C:\Users\vagrant\vagrant_data\Tools\capa.zip" -Destination "C:\Tools\capa.zip"
Copy-Item "C:\Users\vagrant\vagrant_data\Tools\fakenet.zip" -Destination "C:\Tools\fakenet.zip"
Copy-Item "C:\Users\vagrant\vagrant_data\Tools\pev.zip" -Destination "C:\Tools\pev.zip"
Get-ChildItem 'C:\Tools\' -Filter *.zip | Expand-Archive -DestinationPath 'C:\Tools' -Force



# Launch Meterpreter at start up
# New-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" `
#     -Name "Meterpreter-Agent" `
#     -Value "C:\Users\vagrant\vagrant_data\meterpreter-0.exe"
# $WshShell = New-Object -comObject WScript.Shell
# $Shortcut = $WshShell.CreateShortcut("C:\Users\vagrant\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\meterpreter-0.lnk")
# $Shortcut.TargetPath = "C:\Users\vagrant\vagrant_data\meterpreter-0.exe"
# $Shortcut.Save()

# # Winlogbeat
# cp "C:\Users\vagrant\vagrant_data\Winlogbeat\" "C:\Program Files\"
# cd "C:\Program Files\Winlogbeat\"
# .\install-service-winlogbeat.ps1
# .\winlogbeat.exe -c winlogbeat.yml -e
# .\winlogbeat.exe setup -e
# Start-Service winlogbeat

# # Setup Elastic Agent
# (New-Object Net.WebClient).DownloadFile("https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-7.16.2-windows-x86_64.zip", "C:\Users\vagrant\Downloads\elastic-agent.zip")

# # Sysmon
# cp "C:\Users\vagrant\vagrant_data\sysmon-config.xml" "C:\Windows\config.xml"
# C:\Users\vagrant\vagrant_data\Sysmon\Sysmon64.exe -accepteula -i C:\Windows\config.xml
